#!/usr/bin/perl

use strict;
#use warnings;

BEGIN {
    $::pathRoot = $0;
    $::pathRoot =~ s/\/+/\//g;
    $::pathRoot =~ s/[^\/]+$//;
    if ($::pathRoot !~ s/\/[^\/]+\/$//) {
        $::pathRoot .= '..';
    }
};

use lib "$::pathRoot/lib";
use base 'Clib::LineScript';

use Img;
use Func;

require "$::pathRoot/conf/defines.conf";

if (!@ARGV || ($ARGV[0] ne '1234567890')) {
    print "Usage: $0 1234567890\n";
    exit -1;
}

# Чтобы warnings не ругался
$::logDebug ||= 0;
$::logPath ||= '/var/log';
$::pidPath ||= '/var/run';
my $self = __PACKAGE__->new(
    path_root           => $::pathRoot,
    redefine            => 'conf/redefine.conf',
    schema              => 'DB',
    log_file            => "$::logPath/event_import.log",
    pid_file            => "$::pidPath/event_import.pid",
    pid_file_noerror    => 1,
    debug_file          => $::logDebug ? "$::logPath/event_import.log" : undef,
);


use Data::Dumper;
$self->log(1);

my @num = (qw/
/);
my $eventid;# = 39;
my $dtadd = '2021-07-10 10:00';

sub import_event {
    my %cmdid = ();
    
    $self->log("input count: %d", scalar(@num));
    my ($add, $skip, $err) = (0, 0, 0);
    
    foreach my $num (@num) {
        my ($aus, @other) =
            $self->model('Ausweis')->search({ numid => $num }, {}, nolog => 1);
        if (!$aus) {
            $self->error("Unknown NUMID: %s", $num);
            $skip++;
            next;
        }
        if (@other) {
            $self->error("More one NUMID: %s", $num);
            $skip += @other;
        }
        if ($aus->{blocked}) {
            $self->error("Blocked NUMID: %s", $num);
        }

        #next;
        my ($ev) = $self->model('EventAusweis')->search({ evid => $eventid, ausid => $aus->{id} }, {}, nolog => 1);
        if ($ev) {
            $self->error("Duplicate register NUMID: %s", $num);
            $skip++;
            next;
        }

        $cmdid{$aus->{cmdid}} = 1;

        my %c = ( dtadd => $dtadd, evid => $eventid, ausid => $aus->{id}, cmdid => $aus->{cmdid} );
        if (!$self->model('EventAusweis')->create(\%c)) {
            $self->error("Fail registering NUMID: %s", $num);
            $err++;
            next;
        }
        
        $add++;
        $self->log("added OK: %s", $num);
    }
    $self->log("added: %d, skipped: %s, error: %s", $add, $skip, $err);

    #return;
    
    delete($cmdid{$_->{cmdid}})
        foreach $self->model('EventMoney')->search({ evid => $eventid });

    foreach my $cmdid (keys %cmdid) {
        $self->model('EventMoney')->create({
            evid        => $eventid,
            cmdid       => $cmdid,
            allowed     => 1,
        }) || last;
    }
}

import_event();

#==========================================================
#================================================== End ===
#==========================================================

