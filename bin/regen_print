#!/usr/bin/perl

use strict;
#use warnings;

BEGIN {
    $::pathRoot = $0;
    $::pathRoot =~ s/\/+/\//g;
    $::pathRoot =~ s/[^\/]+$//;
    if ($::pathRoot !~ s/\/[^\/]+\/$//) {
        $::pathRoot .= '..';
    }
};

use lib "$::pathRoot/lib";
use base 'Clib::LineScript';

use Func;
use Img;
use Pdf;

use Archive::Zip qw( :ERROR_CODES :CONSTANTS );

require "$::pathRoot/conf/defines.conf";

# Чтобы warnings не ругался
$::logDebug ||= 0;
$::logPath ||= '/var/log';
$::pidPath ||= '/var/run';
my $self = __PACKAGE__->new(
    schema              => 'DB',
    log_file            => "$::logPath/regen_print.log",
    pid_file            => "$::pidPath/regen_print.pid",
    pid_file_noerror    => 1,
    debug_file          => $::logDebug ? "$::logPath/regen_print.log" : undef,
);


#########################################################################
###     Партии на печать

while (my ($prn) = $self->model('Print')->search( 
        { 'regen' => { '>' => 0 }, status => ['A', 'D'] },
    )) {
    $self->log_prefix(sprintf("[party=%d]", $prn->{id}));
    $self->log("Need regenerate: %08b", $prn->{regen});
    
    $self->model('Print')->update({ complete => 0, status => 'D' }, { id => $prn->{id} })
        || last;
    
    if (!Func::MakeCachDir('print', $prn->{id})) {
        $self->error("Can't create dir: $!");
        last;
    }
    my @regen = (0, reverse split(//, sprintf("%08b", $prn->{regen})));
    my $dir = Func::CachDir('print', $prn->{id});
    
    # ZIP -архив с фото, штрих-кодами и списком с данными
    if ($::regen{print_zip} && $regen[$::regen{print_zip}]) { {
        if (!(-d "$dir/photo")) {
            if (!mkdir("$dir/photo")) {
                $self->error("Can't create dir '$dir/photo': $!");
                last;
            }
        }
        if (!(-d "$dir/code")) {
            if (!mkdir("$dir/code")) {
                $self->error("Can't create dir '$dir/code': $!");
                last;
            }
        }
        if (!(-d "$dir/logo")) {
            if (!mkdir("$dir/logo")) {
                $self->error("Can't create dir '$dir/logo': $!");
                last;
            }
        }
        
        if (!open(FHC, ">$dir/print.csv")) {
            $self->error("Can't create file '$dir/print.csv': $!");
        }
        print FHC join(';', map { "\"$_\"" }
            qw/id КОД Партия Заблокирован ФИО Позывной Команда
                    ГруппаКрови Аллергия Непереносимость Полис Медик
                    Блок Комментарии Фото ШК Лого/)."\n";
        foreach my $aus ($self->model('Ausweis')->search(
                { 'print.prnid' => $prn->{id} },
                { prefetch => [qw/command blok print/], order_by => 'numid' },
            )) {
            $self->log_prefix(sprintf("[party=%d ausweis=%d/%d] nick \"%s\"", 
                $prn->{id}, $aus->{id}, $aus->{numid}, $aus->{nick}));
            my $photo = "photo/$aus->{numid}.jpg" if $aus->{photo};
            my $logo = "logo/$aus->{numid}.jpg" if $aus->{command}->{photo};
            my $code = "code/$aus->{numid}.jpg";
            if ($photo) {
                Func::CopyFile($self, Func::CachDir('ausweis', $aus->{id})."/photo.aus.jpg", "$dir/$photo")
                    || ($photo='');
            }
            if ($code) {
                Func::CopyFile($self, Func::CachDir('ausweis', $aus->{id})."/barcode.$aus->{numid}.orig.jpg", 
                    "$dir/$code") || ($code='');
            }
            if ($logo) {
                Func::CopyFile($self, Func::CachDir('command', $aus->{cmdid})."/logo.aus.jpg", "$dir/$logo")
                    || ($logo='');
            }
            
            print FHC join(';', map { "\"$_\"" }
                    $aus->{id}, $aus->{numid}, $prn->{id}, $aus->{blocked},
                    $aus->{fio}, $aus->{nick}, $aus->{command}->{name},
                    $aus->{krov}, $aus->{allerg}, $aus->{neperenos}, $aus->{polis}, $aus->{medik},
                    $aus->{block}->{name}, $aus->{comment}, $photo, $code, $logo
                )."\n";
        }
        close FHC;
        
        my $zip = Archive::Zip->new();
        chdir $dir;
        $zip->addTree('photo', 'photo');
        $zip->addTree('code', 'code');
        $zip->addTree('logo', 'logo');
        $zip->addFile('print.csv');
        if ($zip->writeToFileNamed('print.zip') != AZ_OK) {
            $self->error("Can't create ZIP 'print.zip': $!");
            last;
        }
    
        $self->log_prefix(sprintf("[party=%d]", $prn->{id}));

        #$self->model('Print')->regen_off($prn->{id}, $::regen{print_zip});
        $regen[$::regen{print_zip}] = 0;
    } }
    
    # Печатная форма PDF
    if ($::regen{print_pdf} && $regen[$::regen{print_pdf}]) { {
        my $pdf = eval { PDF::API2->new(-file => "$dir/print.pdf") };
        if ($pdf) {
            $pdf->mediabox(595,842);
            my $count = 0;
            foreach my $aus ($self->model('Ausweis')->search(
                    { 'print.prnid' => $prn->{id} },
                    { prefetch => [qw/command blok print/], order_by => 'numid' },
                )) {
                $self->log_prefix(sprintf("[party=%d ausweis=%d/%d] nick \"%s\"", 
                    $prn->{id}, $aus->{id}, $aus->{numid}, $aus->{nick}));
                my $page = Pdf::Ausweis($self, $pdf, $aus);
                if ($page) {
                    $self->log("Gen print_pdf OK");
                    $count ++;
                }
                $self->model('Print')->update({ complete => $count }, { id => $prn->{id} })
                    || last;
                ($prn) = $self->model('Print')->search({ id => $prn->{id} });
                last if !$prn || $prn->{status} eq 'A';
            }
            $self->log_prefix(sprintf("[party=%d]", $prn->{id}));
            $pdf->save;
            $pdf->end( );
        } else {
            $self->error("Can't create PDF-file: $@");
        }

        #$self->model('Print')->regen_off($prn->{id}, $::regen{print_pdf});
        $regen[$::regen{print_pdf}] = 0;
    } }
    
    # Убиваем непроверяемые флаги
    #my $n=0;
    #my @regenl;
    #foreach my $b (@regen) {
    #    push(@regenl, $n) if $b;
    #    $n++;
    #}
    #if (@regenl) {
    #    $self->model('Print')->regen_off($aus->{id}, @regenl)
    #        || last;
    #}
    $self->model('Print')->update({ status => 'A', regen => 0 }, { id => $prn->{id} })
        || last;
}

#==========================================================
#================================================== End ===
#==========================================================
