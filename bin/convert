#!/usr/bin/perl

use strict;
#use warnings;

BEGIN {
    $::pathRoot = $0;
    $::pathRoot =~ s/\/+/\//g;
    $::pathRoot =~ s/[^\/]+$//;
    if ($::pathRoot !~ s/\/[^\/]+\/$//) {
        $::pathRoot .= '..';
    }
};

use lib "$::pathRoot/lib";
use base 'Clib::LineScript';

require "$::pathRoot/conf/defines.conf";

# Чтобы warnings не ругался
$::logDebug ||= 0;
$::logPath ||= '/var/log';
$::pidPath ||= '/var/run';
my $self = __PACKAGE__->new(
    schema              => 'DB',
    log_file            => "$::logPath/convert.log",
    pid_file            => "$::pidPath/convert.pid",
    pid_file_noerror    => 1,
    debug_file          => $::logDebug ? "$::logPath/convert.log" : undef,
);


use Data::Dumper;
$self->log(1);

#####################################
###### Блоки

my %blok;
if (!open(FH, $::convertFileBlok)) {
    $self->error("CRITICAL!!! Can't open BLOK-file($::convertFileBlok): $!");
    exit -1;
}
$self->model('Blok')->recreate();
my $sth = $self->model('Blok')->create([qw/name/]);
foreach (<FH>) {
    s/\s+$//;
    my ($name, $photo, $id) = map { field($_) } (split /;/);
    if (($name eq 'Нет') || !$name) {
        $blok{$name} = 0;
        next;
    }
    $sth->execute($name)
        || next;
    $blok{$name} = $self->model('Blok')->insertid;
    
    
    # копируем фото
    if ($photo) {
        save_photo('Blok', "$id/$photo", $blok{$name}, $name) || next;
    }
}
$sth->finish;
close FH;
$self->log("BLOK: OK %d items", scalar(keys %blok));


#####################################
###### Команды

my %command;
if (!open(FH, $::convertFileCommand)) {
    $self->error("CRITICAL!!! Can't open Command-file($::convertFileCommand): $!");
    exit -1;
}
$self->model('Command')->recreate();
my $sth = $self->model('Command')->create([qw/name/]);
foreach (<FH>) {
    s/\s+$//;
    my ($name, $photo, $id) = map { field($_) } (split /;/);
    if (($name eq 'Нет') || !$name) {
        $command{$name} = 0;
        next;
    }
    $sth->execute($name)
        || next;
    $command{$name} = $self->model('Command')->insertid;
    
    # копируем фото
    if ($photo) {
        save_photo('Command', "$id/$photo", $command{$name}, $name) || next;
    }
}
$sth->finish;
close FH;
$self->log("COMMAND: OK %d items", scalar(keys %command));


#####################################
###### Аусвайсы

my %cmd2blk;
if (!open(FH, $::convertFileAusweis)) {
    $self->error("CRITICAL!!! Can't open Ausweis-file($::convertFileAusweis): $!");
    exit -1;
}
$self->model('Ausweis')->recreate();
my $sth = $self->model('Ausweis')->create([qw/cmdid blkid blocked numid nick 
                                                fio krov allerg neperenos polis medik comment/]);
my $c = 0;
foreach (<FH>) {
    s/\s+$//;
    my ($id, $numid, $part, $blocked, $fio, $nick, $command, 
        $krov, $allerg, $neperenos, $polis, $medik, 
        $blok, $comment, $photo) = map { field($_) } (split /;/);
    my $blkid = $blok{$blok} || 0;
    my $cmdid = $command{$command} || 0;
    if ($cmdid) {
        if (!defined($cmd2blk{$cmdid})) {
            $self->model('Command')->update({ blkid => $blkid }, { id => $cmdid }, nolog => 1)
                || next;
            $cmd2blk{$cmdid} = $blkid;
        }
        elsif ($cmd2blk{$cmdid} != $blkid) {
            $self->error("Ausweis for nick \"%s\" - Wrong blok id. First id=%d, current=%d",
                $nick, $cmd2blk{$cmdid}, $blkid);
        }
    }
    else {
        $self->error("Ausweis for nick \"%s\" - unknown command", $nick);
    }
    
    $blocked = $blocked && ($blocked =~ /[Дд][Аа]/) ? 1 : 0;
    s/^\s*[Нн][Ее][Тт]\s*$// foreach ($allerg, $neperenos);
    
    $sth->execute($cmdid, $blkid, $blocked, $numid, $nick, 
                    $fio, $krov, $allerg, $neperenos, $polis, $medik, $comment)
        || next;
    my $aus_id = $self->model('Ausweis')->insertid;
    
    # копируем фото
    save_photo('Ausweis', "$id/$photo", $aus_id, $nick) || next;
    
    $c++;
}
$sth->finish;
close FH;
$self->log("AUSWEIS: OK %d items", $c);


sub save_photo {
    my ($model, $photo, $id, $name) = @_;
    
    $photo || return '0E0';
    
    my $dir = lc $model;
    
    if (!(-f "$::convertDirPhoto/$dir/$photo")) {
        $self->error("$model [$name]: file not found ($::convertDirPhoto/$dir/$photo)");
        return;
    }
    
    if (!open(FHI, "$::convertDirPhoto/$dir/$photo")) {
        $self->error("$model [$name]: Can't read photo file($::convertDirPhoto/$dir/$photo): $!");
        return;
    }
    
    my $ext = lc $1 if $photo =~ /\.([a-zA-Z0-9]{1,5})$/;
    $ext ||= 'jpg';
    my $file = "$id.$ext";
    
    if (!open(FHO, ">$::dirPhoto/$dir/$file")) {
        $self->error("$model [$name]: Can't copy photo ($::dirPhoto/$dir/$file): $!");
        close FHI;
        return;
    }
    
    print FHO <FHI>;
    close FHO;
    close FHI;
    
    $self->model($model)->update({ photo => $file }, { id => $id }, nolog => 1)
        || return;
    
    1;
}

sub field {
    my $field = shift;
    $field =~ s/^\"(.*)\"$/$1/;
    $field =~ s/\"\"/\"/g;
    $field =~ s/^\"(.*)\"$/$1/;
    $field =~ s/^\'(.*)\'$/$1/;
    $field =~ s/\'\'/\'/g;
    $field =~ s/^\'(.*)\'$/$1/;
    $field =~ s/^\s+//;
    $field =~ s/\s+$//;
    return $field;
}
#==========================================================
#================================================== End ===
#==========================================================
