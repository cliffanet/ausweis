#!/usr/bin/perl

use strict;
#use warnings;

BEGIN {
    $::pathRoot = $0;
    $::pathRoot =~ s/\/+/\//g;
    $::pathRoot =~ s/[^\/]+$//;
    if ($::pathRoot !~ s/\/[^\/]+\/$//) {
        $::pathRoot .= '..';
    }
};

use lib "$::pathRoot/lib";
use base 'Clib::LineScript';

use Img;
use Func;

require "$::pathRoot/conf/defines.conf";

if (!@ARGV || ($ARGV[0] ne '1234567890')) {
    print "Usage: ./convert 1234567890\n";
    exit -1;
}

# Чтобы warnings не ругался
$::logDebug ||= 0;
$::logPath ||= '/var/log';
$::pidPath ||= '/var/run';
my $self = __PACKAGE__->new(
    schema              => 'DB',
    log_file            => "$::logPath/convert.log",
    pid_file            => "$::pidPath/convert.pid",
    pid_file_noerror    => 1,
    debug_file          => $::logDebug ? "$::logPath/convert.log" : undef,
);


use Data::Dumper;
$self->log(1);

#####################################
###### Блоки

my %blok;
my %blok_name;
if (!open(FH, $::convertFileBlok)) {
    $self->error("CRITICAL!!! Can't open BLOK-file($::convertFileBlok): $!");
    exit -1;
}
$self->model('Blok')->recreate();
my $sth = $self->model('Blok')->create([qw/name/]);
foreach (<FH>) {
    s/\s+$//;
    my ($name, $photo, $id) = map { field($_) } (split /;/);
    if (($name eq 'Нет') || !$name) {
        $blok{$name} = 0;
        next;
    }
    $self->log_prefix(sprintf("[blok=%d] \"%s\"", $id, $name));
    $sth->execute($name)
        || next;
    my $blk_id = ($blok{$name} = $self->model('Blok')->insertid);
    $blok_name{$blk_id} = $name;
    
    
    # копируем фото
    if (!Func::MakeCachDir('blok', $blk_id)) {
        $self->error("Can't create blok dir: $!");
        next;
    }
    
    if ($photo) {
        {
        $photo =~ s/[^ -z]/_/g;
        $photo =~ s/\?/_/g;
        my $photo1 = Img::Copy($self, "$::convertDirPhoto/blok/$id/$photo",
                Func::CachDir('blok', $blk_id), 'logo') || last;
        Img::Save($self, "$::convertDirPhoto/blok/$id/$photo",
                Func::CachDir('blok', $blk_id), 'logo') || last;
        $self->model('Blok')->update(
            { photo => $photo1  },
            { id => $blk_id }, 
            nolog => 1
        ) || return;
        }
    }
    #else {
    #    $self->error("No Logo!");
    #}
}
$self->log_prefix('');
$sth->finish;
close FH;
$self->log("BLOK: OK %d items", scalar(keys %blok));


#####################################
###### Команды

my %command;
if (!open(FH, $::convertFileCommand)) {
    $self->error("CRITICAL!!! Can't open Command-file($::convertFileCommand): $!");
    exit -1;
}
$self->model('Command')->recreate();
my $sth = $self->model('Command')->create([qw/name/]);
foreach (<FH>) {
    s/\s+$//;
    my ($name, $photo, $id) = map { field($_) } (split /;/);
    if (($name eq 'Нет') || !$name) {
        $command{$name} = 0;
        next;
    }
    $self->log_prefix(sprintf("[command=%d] \"%s\"", $id, $name));
    $sth->execute($name)
        || next;
    my $cmd_id = ($command{$name} = $self->model('Command')->insertid);
    
    # копируем фото
    if (!Func::MakeCachDir('command', $cmd_id)) {
        $self->error("Can't create command dir: $!");
        next;
    }
    
    if ($photo) {
        $photo =~ s/[^ -z]/_/g;
        $photo =~ s/\?/_/g;
        {
        my $photo1 = Img::Copy($self, "$::convertDirPhoto/command/$id/$photo",
                Func::CachDir('command', $cmd_id), 'logo') || last;
        Img::Save($self, "$::convertDirPhoto/command/$id/$photo",
                Func::CachDir('command', $cmd_id), 'logo') || last;
        $self->model('Command')->update(
            { photo => $photo1  },
            { id => $cmd_id }, 
            nolog => 1
        ) || return;
        }
    }
    #else {
    #    $self->error("No Logo!");
    #}
}
$self->log_prefix('');
$sth->finish;
close FH;
$self->log("COMMAND: OK %d items", scalar(keys %command));


#####################################
###### Аусвайсы

my %cmd2blk;
if (!open(FH, $::convertFileAusweis)) {
    $self->error("CRITICAL!!! Can't open Ausweis-file($::convertFileAusweis): $!");
    exit -1;
}
$self->model('Ausweis')->recreate();
my $sth = $self->model('Ausweis')->create([qw/cmdid blkid blocked regen numid nick 
                                                fio krov allerg neperenos polis medik comment/]);
my $c = 0;
my %cmd_nick;

    my $r_all = 0;
    $r_all |= 1 << ($::regen{$_}-1) 
        foreach grep { $::regen{$_} } qw/photo print_img print_pdf/;
    my $r_aus = 0;
    $r_aus |= 1 << ($::regen{$_}-1)
        foreach grep { $::regen{$_} } qw/print_img print_pdf/;
    #$self->debug("regen: $r_all / $r_aus");

foreach (<FH>) {
    s/\s+$//;
    my ($id, $numid, $part, $blocked, $fio, $nick, $command, 
        $krov, $allerg, $neperenos, $polis, $medik, 
        $blok, $comment, $photo, $barcode) = map { field($_) } (split /;/);
    
    if (!$id || !$nick) {
        $self->log_prefix('');
        $self->error("Wrong string: %s", $_);
        next;
    }
    $self->log_prefix(sprintf("[ausweis=%d] nick \"%s\"", $id, $nick));
    
    $_ ||= '' 
        foreach $id, $numid, $part, $blocked, $fio, $nick, $command,
                $krov, $allerg, $neperenos, $polis, $medik,
                $blok, $comment, $photo, $barcode;
    
    my $blkid = $blok{$blok} || 0;
    my $cmdid = $command{$command} || 0;
    $blocked = $blocked && ($blocked =~ /[Дд][Аа]/) ? 1 : 0;
    
    my $key = "$cmdid-$nick-$blocked";
    if (my $id0 = $cmd_nick{$key}) {
        $self->error("Dublicate. First = \"%d\", current = \"%d\", command = \"%s\".",
            $id0, $id, $command);
        next;
    }
    $cmd_nick{$key} = $id;
    
    if ($cmdid) {
        my $blkid0 = $cmd2blk{$cmdid};
        if (!defined($blkid0) ||
                (($blkid0 != $blkid) && !$blkid0 && $blkid)
            ) {
            $self->model('Command')->update({ blkid => $blkid }, { id => $cmdid }, nolog => 1)
                || next;
            $cmd2blk{$cmdid} = $blkid;
        }
        elsif (($blkid0 != $blkid) && $blkid0 && $blkid) {
            $self->error("Wrong blok id. Command = \"%s\", first blok = \"%s\", current blok = \"%s\"",
                $blok_name{$blkid0}, $blok_name{$blkid});
        }
    }
    else {
        $self->error("unknown command");
    }
    
    s/^\s*[Нн][Ее][Тт]\s*$// foreach ($allerg, $neperenos);
    
    my $regen = $photo ? $r_all : $r_aus;
    
    $sth->execute($cmdid, $blkid, $blocked, $regen, $numid, $nick, 
                    $fio, $krov, $allerg, $neperenos, $polis, $medik, $comment)
        || next;
    my $aus_id = $self->model('Ausweis')->insertid;
    
    # копируем фото
    if (!Func::MakeCachDir('ausweis', $aus_id)) {
        $self->error("Can't create user dir: $!");
        next;
    }
    
    if ($photo) {
        $photo =~ s/[^ -z]/_/g;
        $photo =~ s/\?/_/g;
        my $photo1 = Img::Copy($self, "$::convertDirPhoto/ausweis/$id/$photo",
                Func::CachDir('ausweis', $aus_id), 'photo');
    
        if ($photo1) {
            $self->model('Ausweis')->update(
                { photo => $photo1  },
                { id => $aus_id }, 
                nolog => 1
            ) || return;
        }
    }
    elsif (!$blocked) {
        $self->error("No Photo!");
    }
        
    # Копируем штрихкод
    if ($barcode && (-f "$::convertDirPhoto/ausweis/$id/code_$barcode")) {
        Img::Copy($self, "$::convertDirPhoto/ausweis/$id/code_$barcode",
                Func::CachDir('ausweis', $aus_id), "barcode.$numid");
    }
                                                                                            
    $c++;
}
$sth->finish;
close FH;
$self->log("AUSWEIS: OK %d items", $c);

sub field {
    my $field = shift;
    $field =~ s/^\"(.*)\"$/$1/;
    $field =~ s/\"\"/\"/g;
    $field =~ s/^\"(.*)\"$/$1/;
    $field =~ s/^\'(.*)\'$/$1/;
    $field =~ s/\'\'/\'/g;
    $field =~ s/^\'(.*)\'$/$1/;
    $field =~ s/^\s+//;
    $field =~ s/\s+$//;
    return $field;
}
#==========================================================
#================================================== End ===
#==========================================================
